AWSTemplateFormatVersion: 2010-09-09
Description: ''
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Prerequisites
        Parameters:
          - IsCloudTrailEnabled
    ParameterLabels:
      IsCloudTrailEnabled:
        default: >-
          Is CloudTrail already enabled in this region? CloudTrail is a
          requirement for Cloudwatch Events. If not enabled, please enable
          CloudTrail before proceeding.
Parameters:
  IsCloudTrailEnabled:
    Description: Specify if CloudTrail is enabled in the current region
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'

Resources:
  EventRule:
    Type: 'AWS::Events::Rule'    
    Properties:
      Description: >-
        Trigger a Lambda function anytime a new S3 bucket is created
      EventPattern:
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - s3.amazonaws.com
          eventName:
            - CreateBucket
      Name: New-S3Bucket-Event
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - EncryptionLambda
            - Arn
          Id: Id1
          
  EncryptionLambda:
    Type: AWS::Lambda::Function        
    Properties:
      Description: Enable encryption on S3 bucket. To use CMS Keys, change SSEAlgorithm value to "aws:kms"
                   and update the KMSMasterKeyID variable to the right value as in KMS and uncomment it wherever it is being referred
      FunctionName: "s3encryption-enforce"
      MemorySize: 128
      Environment:
          Variables:
            ProjectName: !Ref "AWS::StackName"
      Code:
          ZipFile: |          

            import boto3
            from logging import getLogger, info, error, debug
            from os import environ
            from botocore.exceptions import ClientError

            SSEAlgorithm = "AES256"
            KMSMasterKeyID = "1234-1234"

            class Enforce_EBS_Encryption(object):

                def __init__(self):
                    self.s3_client = boto3.client('s3')
                    self.logger = getLogger()
                    self.logger.setLevel("INFO")
                    self.unencryptedbucket = list()

                def getlistofUnEncryptedBucket(self):
                    response = self.s3_client.list_buckets()
                    for bucket in response['Buckets']:
                        try:
                            resp_encryption = self.s3_client.get_bucket_encryption(
                                Bucket=bucket['Name']
                            )
                            rules = resp_encryption['ServerSideEncryptionConfiguration']['Rules']
                            info("{0} is already encrypted : Encryption : {1}".format(bucket['Name'], rules))
                        except ClientError as e:
                            if e.response['Error']['Code'] == 'ServerSideEncryptionConfigurationNotFoundError':
                                info("{0} is not encrypted but will be, No Encrytion found".format(bucket['Name']))
                                self.unencryptedbucket.append(bucket['Name'])
                            else:
                                error("Unexpected error on Bucket: {0}".format(bucket['Name']))

                def _putEncryptiononSingleBucket(self, bucket_name):
                    resp = self.s3_client.put_bucket_encryption(
                        Bucket=bucket_name,
                        ServerSideEncryptionConfiguration={
                            'Rules': [
                                {
                                    'ApplyServerSideEncryptionByDefault': {
                                        'SSEAlgorithm': SSEAlgorithm
                                        # 'KMSMasterKeyID': KMSMasterKeyID
                                    }
                                },
                            ]
                        }
                    )

                def forceEncrytionOnUnEncryptedBucket(self):
                    for bucket in self.unencryptedbucket:
                        self._putEncryptiononSingleBucket(bucket)
                        info("The Bucket : {0} has been encrypted with KMS key".format(bucket))


            def lambda_handler(event, context):
                print("***** Start Processing ****")
                s3_encryption = Enforce_EBS_Encryption()
                s3_encryption.getlistofUnEncryptedBucket()
                s3_encryption.forceEncrytionOnUnEncryptedBucket()
                print("***** End Processing ****")

      Handler: index.lambda_handler
      Role: !GetAtt 
        - LambdaRole
        - Arn
      Runtime: python3.7
      Timeout: 300

  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EncryptionLambda
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - EventRule
        - Arn
  LambdaRole:
    Type: 'AWS::IAM::Role'    
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LambdaGetAndPutEncryptionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: Stmt1458923121000
                Effect: Allow
                Action:
                  - 's3:ListBuckets'
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketEncryption'
                  - 's3:GetEncryptionConfiguration'
                  - 's3:PutEncryptionConfiguration'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'config:PutEvaluations'
                  - 'cloudtrail:LookupEvents'                  
                Resource:
                  - '*'

Outputs: {}
